---
title: Kibana Docker
owner: Services
---


## <a id='overview'></a> Overview

With Docker you can easily push Kibana as an App to manage your Elasticsearch instance.

## <a id='step-by-step-guide'></a> Step by Step Guide

This section describes how to setup your Kibana-instance in Cloud Foundry using the official Docker image from [Elastic](https://www.docker.elastic.co/).

### <a id='prerequisites'></a> Prerequisites

Before you can set up Kibana, you need an Elasticsearch-service.
- [Elasticsearch](./elasticsearch.html)

### <a id='push-logstash-buildpack'></a> Create the manifest.yml
Create a manifest.yml in an empty folder according to the following example to configure your Kibana.

```txt
applications:
  - name: mykibana
    memory: 2G
    disk_quota: 2G
    instances: 1
    routes:
      - route: mykibana.scapp.io
    services:
        - my-elasticsearch
    docker:
      image: docker.elastic.co/kibana/kibana:7.5.2
    command: |
      export ELASTICSEARCH_HOSTS=$(echo $VCAP_SERVICES | grep -Po '"host":\s"\K(.*?)(?=")') &&
      export ELASTICSEARCH_USERNAME=$(echo $VCAP_SERVICES | grep -Po '"full_access_username":\s"\K(.*?)(?=")') &&
      export ELASTICSEARCH_PASSWORD=$(echo $VCAP_SERVICES | grep -Po '"full_access_password":\s"\K(.*?)(?=")') &&
      /usr/local/bin/dumb-init -- /usr/local/bin/kibana-docker
```

Use `ELASTICSEARCH_URL` instead of `ELASTICSEARCH_HOSTS`, if you are using version 6.x of Kibana.

Push the Docker container as usual with `cf push` and access it via the configured route using the full-access-user.

### <a id='next-step'></a> Next Step

If your access works properly, you may continue with setting up your [Index Lifecycle Management](./elasticsearch-ilm.html)

## <a id='further-reading'></a> Further reading

[Official Kibana Documentation](https://www.elastic.co/guide/en/kibana/current/index.html)
